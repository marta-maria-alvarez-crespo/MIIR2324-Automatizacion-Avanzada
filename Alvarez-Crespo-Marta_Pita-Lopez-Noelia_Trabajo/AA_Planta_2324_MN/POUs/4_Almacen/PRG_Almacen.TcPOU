<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Almacen" Id="{1101874a-6a42-4c7a-9ad2-e9048f62be9e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Almacen
VAR
	
	// Variables de control para conocer el estado de la máquina y permitir su coordinación con el proceso de retirada del almacén
	bEstoyLleno: BOOL;
	bAlmacenOcupado : BOOL;
	bAlmacenGuardando: BOOL;
	
	// Variables para almacenar la posición de almacenamiento y para el control del FOR
	iPosicion : INT;
	i: INT := 1;
	
	// VALORES DEL CASE
	ALMACEN: CALMACENAMIENTO;
	
	// Almacenamiento del tipo de caja almacenado para su escritura en el array
	LECTURA: COLOR;
	
	// Function Blocks de cambios de flanco, timers...
	fTrigRRefSensorAlmacen	: F_TRIG;
	fTrigLift				: F_TRIG;
	fTrigMovingX			: F_TRIG;
	tTimerRack 				: TON;

END_VAR

VAR_INPUT
	
	// Almacenamiento de la cantidad de cajas de cada color
	iCantidadAzul : INT;
	iCantidadVerde : INT;
	iCantidadMetal : INT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fTrigRRefSensorAlmacen(CLK:= GVL_Almacen.bRRflexSensorAlmacen);
fTrigLift(CLK:= GVL_Almacen.sStackCraneRack.MovingZ);
fTrigMovingX(CLK:= GVL_Almacen.sStackCraneRack.MovingX);
tTimerRack(IN:=GVL_Almacen.sStackCraneRack.MiddleLimit, PT:=T#1S);

(* Este PRG se encarga de gestionar el almacenamiento en las estanterías. Para ello, comprueba si hay una caja lista para ser almacenada a través del resultado 
devuelto por el VisualSensor y la comprobación de que el almacén no esté realizando otras tareas en ese momento *)

IF GVL_Almacen.iVisionSensorAlmacen > 0 AND (bAlmacenOcupado OR PRG_RetiradaAlmacen.AlmacenSacando)THEN
	GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen2 := FALSE;
ELSE
	GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen2 := TRUE;
END_IF


(* Para ello, se define un CASE que realiza las diferentes lecturas y actuaciones necesarias para el correcto almacenamiento de las cajas *)

CASE ALMACEN OF
	
	CALMACEN_ESPERA:
	(* Colocamos el almacen en posición de espera *)
		
		IF NOT PRG_RetiradaAlmacen.AlmacenSacando THEN
			GVL_Almacen.sStackCraneRack.TargetPosition := 55;
			GVL_Almacen.bLoadingConveyor := FALSE;
			
			IF NOT GVL_Almacen.sStackCraneRack.MovingX AND NOT GVL_Almacen.sStackCraneRack.MovingZ AND tTimerRack.Q THEN
				GVL_Almacen.sStackCraneRack.Right := TRUE;
				GVL_Almacen.sStackCraneRack.Lift  := FALSE;
			END_IF
			
			IF GVL_Almacen.sStackCraneRack.RightLimit THEN
				bAlmacenGuardando := FALSE;
				bAlmacenOcupado := FALSE;
				ALMACEN := CALMACEN_MONTARPALLET;
			END_IF
		END_IF
	
	CALMACEN_MONTARPALLET:
	(* Esperamos a montar el palet en el almacén *)
	
		IF NOT PRG_RetiradaAlmacen.AlmacenSacando THEN	
			IF GVL_Almacen.iVisionSensorAlmacen > 0  THEN
				i:= 0;
				bAlmacenGuardando := TRUE;
				LECTURA := DINT_TO_COLOR(ENTRADA:= GVL_Almacen.iVisionSensorAlmacen);
				GVL_Almacen.bLoadingConveyor := TRUE;
			END_IF
			
			IF fTrigRRefSensorAlmacen.Q THEN
				bAlmacenOcupado := TRUE;
				GVL_Almacen.bLoadingConveyor := FALSE;
				GVL_Almacen.sStackCraneRack.Lift:= TRUE;
			END_IF
			
			IF fTrigLift.Q THEN
				GVL_Almacen.sStackCraneRack.Right := FALSE;
			END_IF
			
			IF GVL_Almacen.sStackCraneRack.MiddleLimit THEN
				ALMACEN := CALMACEN_BUSQUEDA;
			END_IF
	END_IF
	
	CALMACEN_BUSQUEDA:
	(* Una vez colocada la caja en posición, buscamos un sitio donde almacenar *)
	
		FOR i := 1 TO 54 BY 1 DO
			IF	GVL_Almacen.aAlmacen[i] = VACIO THEN
				iPosicion := i;
				GVL_Almacen.aAlmacen[i] := LECTURA;
				ALMACEN := CALMACEN_GUARDADO;
				EXIT;
			END_IF
	
		END_FOR
	
		IF i = 55 THEN
			bEstoyLleno := TRUE;
			ALMACEN := CALMACEN_LLENO;
		END_IF
	
	
	CALMACEN_GUARDADO:
	(* Almacenamos en el sitio indicado *)
	
		GVL_Almacen.sStackCraneRack.TargetPosition := iPosicion;
		
		IF fTrigMovingX.Q THEN
			GVL_Almacen.sStackCraneRack.Left := TRUE;
		END_IF
		
		IF GVL_Almacen.sStackCraneRack.LeftLimit THEN
			GVL_Almacen.sStackCraneRack.Lift := FALSE;
			ALMACEN := CALMACEN_ORIGEN;
		END_IF	
	
	
	CALMACEN_ORIGEN:
	(* Devolvemos el almacén a posición de origen *)
	
		IF fTrigLift.Q THEN
			GVL_Almacen.sStackCraneRack.Left := FALSE;	
			
			IF LECTURA = AZUL THEN
				iCantidadAzul  := iCantidadAzul  + 1;
			END_IF
			
			IF LECTURA = VERDE THEN
				iCantidadVerde  := iCantidadVerde  + 1;
			END_IF
			
			IF LECTURA = METAL THEN
				iCantidadMetal  := iCantidadMetal + 1;
			END_IF
			
		END_IF
		
		IF GVL_Almacen.sStackCraneRack.MiddleLimit THEN
			ALMACEN := CALMACEN_ESPERA;
		END_IF
	
	
	CALMACEN_LLENO:
	(* Almacen lleno *)
	
		GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen2 := FALSE;
		GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerAlmacen := FALSE;
		GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen1 := FALSE;
		
		IF NOT bEstoyLleno THEN
			ALMACEN := 0;
		END_IF
		
		ALMACEN := CALMACEN_BUSQUEDA;
	
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="PRG_Almacen">
      <LineId Id="161" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="456" Count="3" />
      <LineId Id="453" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="362" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="145" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="512" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="211" Count="9" />
      <LineId Id="209" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="245" Count="3" />
      <LineId Id="258" Count="1" />
      <LineId Id="383" Count="0" />
      <LineId Id="392" Count="1" />
      <LineId Id="244" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="388" Count="2" />
      <LineId Id="387" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="337" Count="1" />
      <LineId Id="484" Count="0" />
      <LineId Id="473" Count="9" />
      <LineId Id="472" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="326" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="350" Count="8" />
      <LineId Id="349" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="198" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>