<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Turntable" Id="{4632a491-dbef-4586-9e55-e4a069d82d54}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Turntable
VAR
	// Asignación de valores del CASE
	Turntable : CTURNTABLE;
	
	// FB asociados a cambios de flanco, timers...
	tFTrigDiffuseSensor	: F_TRIG;
	tFTrigEmitterA		: F_TRIG;
	tFTrigEmitterV		: F_TRIG;
	tFTrigEmitterM		: F_TRIG;
	tRTrigEmitterA		: R_TRIG;
	tRTrigEmitterV		: R_TRIG;
	tRTrigEmitterM		: R_TRIG;
	tRtrigCajaLlenaA	: R_TRIG;
	tRtrigCajaLlenaV	: R_TRIG;
	tRtrigCajaLlenaM	: R_TRIG;
	
	// Declaración de memorias para determinar qué camino se activará
	bMemoriaAzul: BOOL;
	bMemoriaVerde: BOOL;
	bMemoriaMetal: BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[tFTrigDiffuseSensor(CLK:= GVL_ProcesoPallet.bDiffuseSensorSalida);
tFTrigEmitterA(CLK:= GVL_ProcesoPallet.iLightArrayEmitterA);
tFTrigEmitterV(CLK:= GVL_ProcesoPallet.iLightArrayEmitterV);
tFTrigEmitterM(CLK:= GVL_ProcesoPallet.iLightArrayEmitterM);
tRTrigEmitterA(CLK:= GVL_ProcesoPallet.iLightArrayEmitterA);
tRTrigEmitterV(CLK:= GVL_ProcesoPallet.iLightArrayEmitterV);
tRTrigEmitterM(CLK:= GVL_ProcesoPallet.iLightArrayEmitterM);
tRtrigCajaLlenaA(CLK:= PRG_PickAndPlace.CajaLlenaA);
tRtrigCajaLlenaV(CLK:= PRG_PickAndPlace.CajaLlenaV);
tRtrigCajaLlenaM(CLK:= PRG_PickAndPlace.CajaLlenaM);


// Activación de los Roller que envían las cajas al almacén
GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerAlmacen := TRUE;
GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen1 := TRUE;
GVL_ProcesoPallet.sRollerConveyor.bRollerAlmacen2 := TRUE;


(* Para el procesado de esta estación, se generan una serie de variables que permiten que la máquina de estados propuesta, solo pueda
elegir un único camino. De esta manera, se parte de un estado inicial de reposo y, en cuanto las cajas alcanzan su valor máximo de llenado
a través del contador implementado en los PickAndPlace, la máquina saltará al estado correspondiente y procesará una de las líneas únicamente *)

IF tRtrigCajaLlenaA.Q THEN
	bMemoriaAzul := TRUE;
END_IF

IF tRtrigCajaLlenaV.Q THEN
	bMemoriaVerde := TRUE;
END_IF

IF tRtrigCajaLlenaM.Q THEN
	bMemoriaMetal := TRUE;
END_IF


CASE Turntable OF
	
	CTURNTABLE_ESPERA:
	(* Proceso espera *)
	
		IF bMemoriaAzul THEN
			TURNTABLE := CTURNTABLE_CARGAAZUL;
		END_IF
		
		
		IF bMemoriaVerde THEN
			TURNTABLE := CTURNTABLE_CARGAVERDE;
		END_IF
		
		
		IF bMemoriaMetal THEN
			TURNTABLE := CTURNTABLE_CARGAMETAL;
		END_IF
	
	CTURNTABLE_CARGAAZUL:
	(* Proceso de carga para la caja azul *)
	
		IF GVL_ProcesoPallet.bDiffuseSensorPaletA THEN
			GVL_ProcesoPallet.sRollerConveyor.bRollerAzul1 := FALSE;
			GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerAzul1 := FALSE;
		ELSE
			GVL_ProcesoPallet.sRollerConveyor.bRollerAzul1 := TRUE;
			GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerAzul1 := TRUE;
		END_IF
		
		GVL_ProcesoPallet.sTurnTable.Turn := TRUE;
		GVL_ProcesoPallet.sTurnTable.RollPositivo := TRUE;
		
		IF GVL_ProcesoPallet.sTurnTable.Limit90 THEN
			TURNTABLE := CTURNTABLE_DESCARGAAZUL;
		END_IF	
	
	
	CTURNTABLE_DESCARGAAZUL:
	(* Proceso de descarga para la caja azul *)
	
		GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerAzul1 := TRUE;
		IF GVL_ProcesoPallet.sTurnTable.FrontLimit THEN
			GVL_ProcesoPallet.sTurnTable.RollPositivo := FALSE;
			GVL_ProcesoPallet.sTurnTable.Turn := FALSE;
		END_IF
		
		IF GVL_ProcesoPallet.sTurnTable.Limit0 THEN
			GVL_ProcesoPallet.sTurnTable.RollPositivo := TRUE;
			bMemoriaAzul := FALSE;
			TURNTABLE := CTURNTABLE_SALIDA;
		END_IF
		
	
	CTURNTABLE_CARGAVERDE:
	(* Proceso de carga para la caja verde *)
	
		IF GVL_ProcesoPallet.bDiffuseSensorPaletV THEN
			GVL_ProcesoPallet.sRollerConveyor.bRollerVerde1 := FALSE;
		ELSE
			GVL_ProcesoPallet.sRollerConveyor.bRollerVerde1 := TRUE;
		END_IF
		
		GVL_ProcesoPallet.sTurnTable.Turn := FALSE;
		
		IF GVL_ProcesoPallet.sTurnTable.Limit0 THEN
			GVL_ProcesoPallet.sRollerConveyor.bRollerVerde1 := TRUE;
			GVL_ProcesoPallet.sTurnTable.RollPositivo := TRUE;
			bMemoriaVerde := FALSE;
			TURNTABLE := CTURNTABLE_SALIDA;
		END_IF
	
	
	CTURNTABLE_CARGAMETAL:
	(* Proceso de carga para la caja azul *)
	
		IF GVL_ProcesoPallet.bDiffuseSensorPaletM THEN
			GVL_ProcesoPallet.sRollerConveyor.bRollerMetal1 := FALSE;
			GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerMetal1 := FALSE;
		ELSE
			GVL_ProcesoPallet.sRollerConveyor.bRollerMetal1 := TRUE;
			GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerMetal1 := TRUE;
		END_IF
		
		GVL_ProcesoPallet.sTurnTable.Turn := TRUE;
		GVL_ProcesoPallet.sTurnTable.RollNegativo := TRUE;
		
		IF GVL_ProcesoPallet.sTurnTable.Limit90 THEN
			TURNTABLE := CTURNTABLE_DESCARGAMETAL;
		END_IF	
		
	
	CTURNTABLE_DESCARGAMETAL:
	(* Proceso de descarga para la caja azul *)
	
		GVL_ProcesoPallet.sRollerConveyor.bCurvedRollerMetal1 := TRUE;
		IF GVL_ProcesoPallet.sTurnTable.BackLimit THEN
			GVL_ProcesoPallet.sTurnTable.RollNegativo := FALSE;
			GVL_ProcesoPallet.sTurnTable.Turn := FALSE;
		END_IF
		
		IF GVL_ProcesoPallet.sTurnTable.Limit0 THEN
			GVL_ProcesoPallet.sTurnTable.RollPositivo := TRUE;
			bMemoriaMetal := FALSE;
			TURNTABLE := CTURNTABLE_SALIDA;
		END_IF
	
	
	CTURNTABLE_SALIDA:
	(* Proceso de detección para determinar si la caja ya salió de la zona de acción de la mesa 
	   y poder comenzar el procesamiento de otras cajas *)
	   
		IF tFTrigDiffuseSensor.Q THEN
			TURNTABLE := CTURNTABLE_ESPERA;
			GVL_ProcesoPallet.sTurnTable.RollPositivo := FALSE;
		END_IF
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="PRG_Turntable">
      <LineId Id="301" Count="1" />
      <LineId Id="307" Count="1" />
      <LineId Id="356" Count="1" />
      <LineId Id="355" Count="0" />
      <LineId Id="537" Count="2" />
      <LineId Id="625" Count="1" />
      <LineId Id="552" Count="1" />
      <LineId Id="599" Count="1" />
      <LineId Id="627" Count="4" />
      <LineId Id="598" Count="0" />
      <LineId Id="556" Count="2" />
      <LineId Id="560" Count="3" />
      <LineId Id="565" Count="2" />
      <LineId Id="554" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="450" Count="1" />
      <LineId Id="510" Count="1" />
      <LineId Id="540" Count="11" />
      <LineId Id="452" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="500" Count="1" />
      <LineId Id="503" Count="0" />
      <LineId Id="506" Count="3" />
      <LineId Id="504" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="119" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="128" Count="3" />
      <LineId Id="577" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="520" Count="0" />
      <LineId Id="514" Count="1" />
      <LineId Id="517" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="211" Count="2" />
      <LineId Id="526" Count="5" />
      <LineId Id="524" Count="1" />
      <LineId Id="214" Count="9" />
      <LineId Id="522" Count="0" />
      <LineId Id="225" Count="7" />
      <LineId Id="575" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="632" Count="2" />
      <LineId Id="147" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>